@meta(
    author: "VAC Dev Protocol",
    version: "0.9.7-prelude",
    codename: "SurgeScript"
)

@compile(target: "x86_64", optimize: true, fold: true)
@virtualMemory(["bootstrapMemory", "directiveLinker"])
@hotRoute
@chain([bootload, initialize, launchCore])

@start
main() {
    bootload();
    initialize();
    launchCore();
}

// ðŸ”¸ Phase 1: Bootloader
@priority(critical)
function bootload() {
    log("â‡¨ BOOTLOADER ENGAGED...");
    inject("directives/core.exu");
    inject("modules/render.exu");
    prepareMemoryMap();
    mountFileSystem("execue.fsx");
}

// ðŸ”¸ Phase 2: System Initialization
@priority(high)
@optimize(AOT)
function initialize() {
    log("â‡¨ INITIALIZING SYSTEM COMPONENTS...");
    
    config core = loadConfig("config/core.json");
    bindSubsystems(core.subsystems);

    if (!validate(core.integrity)) {
        throw SystemIntegrityError("Core config failed verification");
    }

    preloadModules([
        "sensorBridge.exu",
        "executionRouter.exu",
        "renderPipeline.exu"
    ]);
}

// ðŸ”¸ Phase 3: Core Execution Launch
@renderPipeline(force)
@executionMode(stream)
function launchCore() {
    log("â‡¨ LAUNCHING EXECUTION CORE...");

    task execController = spawn("tasks/controller.exu");
    stream execFlow = openStream(execController, mode: "distributed");

    while (execFlow.active) {
        pulse = execFlow.read();
        handlePulse(pulse);
    }
}

// ðŸ›  Pulse Handler
function handlePulse(pulseData) {
    if (pulseData.critical) {
        routeTo("failsafe.exu");
    } else {
        routeTo("routing/mainRoute.exu");
    }
}
