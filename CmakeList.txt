# CMake Minimum Version Requirement
cmake_minimum_required(VERSION 3.14)

# Project Name and Version
project(Execue
    VERSION 1.0
    LANGUAGES CXX
)

# Set the C++ standard and enable required compiler features
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Define the binary directory for all output files
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Define where build artifacts will go for the `make install` or other commands
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Enable the use of C++17/20 standard libraries
if (NOT DEFINED CMAKE_CXX_FLAGS)
    set(CMAKE_CXX_FLAGS "")
endif()

# Add support for additional dependencies via `vcpkg`
find_package(Vcpkg REQUIRED)
set(CMAKE_TOOLCHAIN_FILE "${CMAKE_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake")

# Add external dependencies
find_package(Boost REQUIRED)
find_package(fmt REQUIRED)

# External packages can be added as needed
# Example:
# find_package(OpenGL REQUIRED)

# Specify the location of the include directories (for headers)
include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(${Boost_INCLUDE_DIRS})
include_directories(${fmt_INCLUDE_DIRS})

# Add the `src/` folder for the source files
add_subdirectory(src)

# Define an executable target for the project
add_executable(${PROJECT_NAME} 
    src/main.cpp 
    src/interpreter.cpp 
    src/parser.cpp 
    src/lexer.cpp 
    src/rendering.cpp
)

# Link with external libraries like Boost, fmt, etc.
target_link_libraries(${PROJECT_NAME} 
    Boost::Boost
    fmt::fmt
    # OpenGL (or any other library you need)
)

# Link additional libraries for platform-specific needs
if (WIN32)
    target_link_libraries(${PROJECT_NAME} 
        # Windows specific libraries, if any
    )
elseif (APPLE)
    target_link_libraries(${PROJECT_NAME} 
        # macOS specific libraries, if any
    )
elseif (UNIX)
    target_link_libraries(${PROJECT_NAME} 
        # Linux specific libraries, if any
    )
endif()

# Ensure the build is optimized with advanced compiler flags
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g3")

# Enable static linking for dependencies if needed
set(BUILD_STATIC_LIBS OFF) # Change to ON if you want static linking

# Enable CMake testing
enable_testing()

# Allow for external CMake configuration for pre-defined module locations
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules")

# Define installation paths
install(TARGETS ${PROJECT_NAME} DESTINATION bin)

# Optional: Allow users to specify build options (like custom flags)
option(BUILD_SHARED_LIBS "Build shared libraries" OFF)

# Post-build Commands - Create and optimize output files
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${PROJECT_NAME}> ${CMAKE_BINARY_DIR}/bin
    COMMENT "Copying ${PROJECT_NAME} to bin directory"
)

# Provide a helpful summary after configuring
message(STATUS "Execue Project Configuration Summary:")
message(STATUS "CMake Version: ${CMAKE_VERSION}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Boost Version: ${Boost_VERSION}")
message(STATUS "fmt Version: ${fmt_VERSION}")
message(STATUS "Output Directory: ${CMAKE_BINARY_DIR}/bin")

# Setup debugging options to track build dependencies
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
